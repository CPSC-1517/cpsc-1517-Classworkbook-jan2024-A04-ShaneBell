@page "/ProductMaintenance/{productId:int?}"

@* if the new button is pressed on products page display a heading "Add Product". Otherwise display a heading "View/Edit Product" *@

@* If a discontinued product is loaded, disable all the controls and do not show any buttons*@

@if (ProductID == 0)
{
    <h3>Add Product</h3>
}
else
{
    <h3>View/Edit Product</h3>
}
@if (Errors.Count > 0)
{
    <div class=" = alert alert-danger">
        @foreach (var errors in Errors)
        {
            <p>@errors.Value</p>
        }
    </div>
}

@if (Product.Discontinued)
{
    <div class ="mb-3">
        <div class="alert alert-warning fw-bold">
            PRODUCT DISCONTINUED
        </div>
    </div>
}


<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="productid">ID</label>
        <input class="form-control" type="text" id="productid" @bind="@Product.ProductId" disabled  />
    </div>


    <div class="col-6">
        <label class="form-label" for="name">Name</label>
        <input class="form-control" type="text" id="name" @bind="@Product.ProductName" disabled="@(Product.Discontinued? true:false)" />
    </div>
</div>

<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="qytperunit">Quantity Per Unit</label>
        <input class="form-control" type="text" id="qytperunit" @bind="@Product.QuantityPerUnit" disabled="@(Product.Discontinued? true:false)" />
    </div>


    <div class="col-6">
        <label class="form-label" for="minorderqty">Minimum Order Quantity</label>
        <input class="form-control" type="text" id="minorderqty" @bind="@Product.MinimumOrderQuantity" disabled="@(Product.Discontinued? true:false)" />
    </div>
</div>


<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="unitprice">Unit Price</label>
        <input class="form-control" type="text" id="unitprice" @bind="@Product.UnitPrice" disabled="@(Product.Discontinued? true:false)" />
    </div>

    <div class="col-6">
        <label class="form-label" for="unitsonorder">Units On Order</label>
        <input class="form-control" type="text" id="unitsonorder" @bind="@Product.UnitsOnOrder" disabled="@(Product.Discontinued? true:false)" />
    </div>
</div>


<div class="row bm-3">
    <div class="col-3">
        <label class="form-label" for="category">Category</label>
        <select class="form-select" id="category" style="width:300px" @bind="Product.CategoryId" disabled="@(Product.Discontinued? true:false)">
            <option value=0>Please choose a category</option>
            @foreach (Category aCategory in CategoryServices.GetAllCategories())
            {
                <option value="@aCategory.CategoryId">@aCategory.CategoryName</option>
            }
        </select>
    </div>

    <div class="col-6">
        <label class="form-label" for="supplier">Supplier</label>
        <select class="form-select" id="supplier" style="width:300px" @bind="Product.SupplierId" disabled="@(Product.Discontinued? true:false)">
            <option value=0>Please choose a supplier</option>
            @foreach (Supplier aSupplier in SupplierServices.GetAllSuppliers())
            {
                <option value="@aSupplier.SupplierId">@aSupplier.CompanyName</option>
            }
        </select>
    </div>
</div>

@* Do not show buttons for discontinued products *@
@if (!Product.Discontinued)
{
    <div class="mt-3">
        <button class="btn btn-primary" @onclick="SaveProduct">Save Product</button>
        <button class="btn btn-primary" @onclick="DiscontinueProduct">Discontinue Product</button>
        <button class="btn btn-primary" @onclick="DeleteProduct">Delete Product</button>
    </div>
}



@code {

    [Inject]
    private CategoryServices CategoryServices { get; set; }
    [Inject]
    private SupplierServices SupplierServices { get; set; }

    @using WestWindSystem.Entities;
    @using WestWindSystem.BLL;

    [Inject]
    private ProductServices ProductServices { get; set; }

    [Parameter]
    public int ProductID { get; set; }

    private Product Product { get; set; } = new();

    private Dictionary<string, string> Errors { get; set; } = new();

    protected override void OnInitialized()
    {
        if (ProductID != 0)
        {
            Product = ProductServices.GetProductById(ProductID);
        }


        base.OnInitialized();
    }
    private void SaveProduct()
    {
        if (ValidateForm())
        {
            if (ProductID == 0)
            {
                try
                {
                    ProductServices.AddProduct(Product);
                }
                catch (Exception ex)
                {
                    Errors.Add("product-Add", ex.Message);
                }
            }
            else
            {
                try
                {
                    ProductServices.UpdateProduct(Product);
                }
                catch (Exception ex)
                {
                    Errors.Add("product-update", ex.Message);
                }
            }
        }
    }

    private void DeleteProduct()
    {
        if (ValidateForm())
        {
            try
            {
                ProductServices.DeleteProduct(Product);
            }
            catch (Exception ex)
            {
                Errors.Add("product-delete", ex.Message);
            }
        }
    }

    private void DiscontinueProduct()
    {
        try
        {
            ProductServices.DiscontinueProduct(Product);
        }
        catch (Exception ex)
        {
            Errors.Add("product-discontinue", ex.Message);
        }
    }

    private bool ValidateForm()
    {
        Errors.Clear();
        if (string.IsNullOrWhiteSpace(Product.ProductName))
        {
            Errors.Add("product-name", "Product Name cannot be empty");
        }
        if (string.IsNullOrWhiteSpace(Product.QuantityPerUnit))
        {
            Errors.Add("quantity", "Product Name cannot be empty");
        }
        if (Product.UnitPrice <= 0)
        {
            Errors.Add("unit-price", "Unit price must be greater than 0");
        }
        if (Product.UnitsOnOrder < 0)
        {
            Errors.Add("unit-order", "Unit on order cannot be negative");
        }        
        if (Product.CategoryId == 0)
        {
            Errors.Add("category", "Must choose a category");
        }
        if (Product.SupplierId == 0)
        {
            Errors.Add("category", "Must choose a supplier");
        }
        return Errors.Count == 0;//Did the validation pass
    }
}